name: Build and Publish Docker Image

on:
  push:
    branches:
      - main
      - develop
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Trivy vulnerability scanner
        if: github.event_name != 'pull_request'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        if: github.event_name != 'pull_request'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-mock

      - name: Run basic import tests
        run: |
          python -c "import src.models; print('Models module imported successfully')"
          python -c "import src.database; print('Database module imported successfully')"
          python -c "import src.log_monitor; print('Log monitor module imported successfully')"
          python -c "import src.ai_analyzer; print('AI analyzer module imported successfully')"
          python -c "import src.web_interface; print('Web interface module imported successfully')"

      - name: Test Docker build
        run: |
          docker build -t test-image .
          echo "Docker build successful"

      - name: Test container health
        run: |
          # Create minimal test environment
          mkdir -p test-config test-data
          echo "2023-01-01 12:00:00 ERROR (MainThread) [test.component] Test error message" > test-config/home-assistant.log
          
          # Start container in background
          docker run -d \
            --name test-container \
            -p 8081:8080 \
            -v $(pwd)/test-config:/config:ro \
            -v $(pwd)/test-data:/data \
            -e OPENAI_ENDPOINT_URL=https://api.openai.com/v1 \
            -e OPENAI_API_KEY=test-key \
            test-image
          
          # Wait for container to start
          sleep 30
          
          # Test health endpoint (should return error due to invalid API key, but endpoint should work)
          curl -f http://localhost:8081/api/health || echo "Health check returned expected error (invalid API key)"
          
          # Test static files
          curl -f http://localhost:8081/ -o /dev/null
          
          # Cleanup
          docker stop test-container
          docker rm test-container